# -*- coding: utf-8 -*-
"""Data_Wrangling_practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IAsNguaJO1-NI37zMcZxoWupRkBIdewa
"""

import pandas as pd
df = pd.read_excel('Customer Call List.xlsx')
df

# cleaning data

#1. Last name cleaning - random '/', '...', and Nan
#2. phone numbers - inconsistant
#3. Address - inconsistant
#4. Paying customer - inconsistant

df= df.drop_duplicates()
df

# clean columns not needed
df = df.drop(columns='Not_Useful_Column')
df



df["Last_Name"] = df["Last_Name"].str.strip("/")
df["Last_Name"] = df["Last_Name"].str.strip("_")
df["Last_Name"] = df["Last_Name"].str.strip("...")

df

df['Phone_Number'] = df['Phone_Number'].str.replace('[^a-zA-Z0-9]','', regex=True)
df

# phone_number - is float and string so convert them to string by applying them to each phone number
df['Phone_Number'] = df['Phone_Number'].apply(lambda x: str(x))
df['Phone_Number'] = df['Phone_Number'].apply(lambda x: x[0:3] + '-' + x[3:6] +'-' + x[6:10])
df

# remove nan
df['Phone_Number'] = df['Phone_Number'].str.replace('nan--','')
df['Phone_Number'] = df['Phone_Number'].str.replace('Na--','')
df

# cleaning the address - seperate into 3 columns: address, state or city, zipcode
df[["Street_Address", "State", "Zip"]]=df['Address'].str.split(',', n=2, expand=True)
df = df.drop(columns='Address')
df

#cleaning paying_customer
df['Paying Customer'] = df['Paying Customer'].str.replace('Yes','Y')
df['Paying Customer'] = df['Paying Customer'].str.replace('No','N')
df

#cleaning do_not_contact
df['Do_Not_Contact'] = df['Do_Not_Contact'].str.replace('Yes','Y')
df['Do_Not_Contact'] = df['Do_Not_Contact'].str.replace('No','N')
df

# df = df.replace('N/a','')
# df = df.replace('NaN','')
df = df.fillna('')
df



# Returning only people who said don't contact - so 'no'

for x in df.index:
    if df.loc[x, "Do_Not_Contact"] == 'Y':
        df.drop(x, inplace=True)

df

for x in df.index:
    if df.loc[x, "Phone_Number"] == '':
        df.drop(x, inplace=True)

df

df = df.reset_index(drop=True)
df

# Working on LinkedIn Dataset

import pandas as pd
dataset_directory = "LinkedIn_Dataset.pcl"
dataset = pd.read_pickle(dataset_directory)
dataset

dataset.head()

dataset.info()

dataset[dataset['Full Name'].isnull()]

# rows with label 10 and 11 are ChatGPT made so we'll drop these columns

dataset = dataset[dataset['Label'] != 10]
dataset = dataset[dataset['Label'] != 11]

dataset.info()

dataset = pd.DataFrame(dataset)

# spliting Full Name into first name last name

dataset[['First Name', 'Last Name']] = dataset['Full Name'].str.split(' ', n=1, expand=True)
dataset = dataset.drop(columns='Full Name')
dataset

#spliting loaction into state and country

dataset[['City', 'State', 'Country']] = dataset['Location'].str.split(',', n=2, expand=True)
dataset = dataset.drop(columns='Location')
dataset

dataset.info()

# we don't need - connections, photo, followers, label - drop these columns

dataset = dataset.drop(columns=['Connections', 'Photo', 'Followers'])
dataset

dataset =  dataset.drop(columns =[ 'Label'])
dataset

# education is in the form of dict - convert them into string
def format_education(education):
  parts = []
  for key, value in education.items():
    for detail_key, detail_value in value.items():
      parts.append(f"{detail_key}: {detail_value}")
  return ", ".join(parts)

dataset['Educations'] = dataset['Educations'].apply(lambda x: format_education(x))
dataset

#similarly for experiences

def format_experience(experience):
  parts = []
  for key, value in experience.items():
    for detail_key, detail_value in value.items():
      parts.append(f"{detail_key}: {detail_value}")
  return ", ".join(parts)

dataset['Experiences'] = dataset['Experiences'].apply(lambda x: format_experience(x))
dataset

dataset.info()

# won't need activities and number of activities so droping these

dataset = dataset.drop(columns=['Activities', 'Number of Activities'])
dataset.info()

#filtering people who live in the United States
dataset['Country'] = dataset['Country'].str.strip().str.title()
dataset_USA = dataset[dataset['Country'] == 'United States']
dataset_USA

# filtering Indians living in the USA using their education and Experience

indians_in_usa = dataset_USA[(dataset_USA['Educations'].str.contains('India')) & (dataset_USA['Experiences'].str.contains('India'))]
indians_in_usa
# also returns values with indiana

indians_in_usa = dataset_USA[
    dataset_USA['Educations'].str.contains(r'\bIndia\b', regex=True, na=False) |
    dataset_USA['Experiences'].str.contains(r'\bIndia\b', regex=True, na=False)
]
indians_in_usa

indians_in_usa.info()

indians_in_usa = indians_in_usa.drop(columns=['Interests', 'Number of Interests', 'Scores', 'Number of Scores'])
indians_in_usa